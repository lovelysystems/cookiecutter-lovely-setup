[crate]
recipe = hexagonit.recipe.download
url = http://download.cratedb.org/releases/crate-${versions:crate-java}.tar.gz
strip-top-level-dir = true
log_dir = ${buildout:directory}/var/log/crate
data_dir = ${buildout:directory}/var/crate
multicast = false
cluster_name = {{cookiecutter.repo_name}}-dev

[crate-scripts]
recipe = zc.recipe.egg:scripts
scripts = crash
relative-paths=true
eggs = crate
interpreter = py

[crate-setup]
recipe = lovely.recipe:mkfile
path = ${buildout:bin-directory}/crate_setup
mode = 0755
crate = http://localhost:${ports:crate}
content = #!/bin/sh
 if [ $1 ]
 then
     HOST=$1
 else
     HOST=localhost:${ports:crate}
 fi
 if [ $(uname) == "Darwin" ]
 then
     FIND=gfind
 else
     FIND=find
 fi
 INDEXES=$($FIND ${buildout:directory}/etc/crate_indexes/ -name '*.json' -type f -printf "%%f\n" | sed 's/\.[^\.]*$//')
 for index in $INDEXES
 do
    echo "Create index '$index'"
    curl -sSX PUT $HOST/$index -d @etc/crate_indexes/$index.json
    echo
 done

[crate-cleanup]
recipe = lovely.recipe:mkfile
path = ${buildout:bin-directory}/crate_cleanup
mode = 0755
crate = http://localhost:${ports:crate}
content = #!/bin/sh
 if [ $1 ]
 then
     HOST=$1
 else
     HOST=localhost:${ports:crate}
 fi
 if [ $(uname) == "Darwin" ]
 then
     FIND=gfind
 else
     FIND=find
 fi
 INDEXES=$($FIND ${buildout:directory}/etc/crate_indexes/ -name '*.json' -type f -printf "%%f\n" | sed 's/\.[^\.]*$//')
 for index in $INDEXES
 do
    echo "Deleting index '$index'"
    curl -sSX DELETE $HOST/$index
    echo
 done
